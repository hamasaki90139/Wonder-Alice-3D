//=============================================================================
//
// ÉGÉlÉ~Å[ÉÇÉfÉãèàóù[enemy.cpp]
// Author : ‡_çË è¨èt
//
//=============================================================================
#include "main.h"
#include "input.h"
#include "enemy.h"
#include "shadow.h"
#include "player.h"
#include "item.h"
#include "collision.h"
#include "debugproc.h"
#include "particle.h"

//*****************************************************************************
//ÉvÉçÉgÉ^ÉCÉvêÈåæ
//*****************************************************************************


//*****************************************************************************
// ÉOÉçÅ[ÉoÉãêÈåæ
//*****************************************************************************

static ENEMY				g_Enemy[MAX_ENEMY];							// ÉGÉlÉ~Å[
static ENEMY				g_Enemyhead[MAX_ENEMY];						// ÉvÉåÉCÉÑÅ[ÇÃì™ïî
static ENEMY				g_EnemyarmR[MAX_ENEMY];                     // ÉvÉåÉCÉÑÅ[ÇÃòr
static ENEMY				g_EnemyarmL[MAX_ENEMY];                     // ÉvÉåÉCÉÑÅ[ÇÃòr
static ENEMY				g_EnemylegR[MAX_ENEMY];                     // ÉvÉåÉCÉÑÅ[ÇÃëæÇ‡Ç‡
static ENEMY				g_EnemylegL[MAX_ENEMY];                     // ÉvÉåÉCÉÑÅ[ÇÃëæÇ‡Ç‡
D3DXVECTOR3					g_Shadowpos[ENEMY_GROUP];					// ÉrÉãÉ{Å[Éhî≠ê∂à íu

LPDIRECT3DTEXTURE9	enemy_pD3DTexture_body;			// ÉeÉNÉXÉ`ÉÉÇ÷ÇÃÉ|ÉCÉìÉ^
LPD3DXMESH			enemy_pD3DXMesh_body;			// ÉÅÉbÉVÉÖèÓïÒÇ÷ÇÃÉ|ÉCÉìÉ^
LPD3DXBUFFER		enemy_pD3DXBuffMat_body;		// É}ÉeÉäÉAÉãèÓïÒÇ÷ÇÃÉ|ÉCÉìÉ^
DWORD				enemy_nNumMat_body;				// É}ÉeÉäÉAÉãèÓïÒÇÃêî

LPDIRECT3DTEXTURE9	enemy_pD3DTexture_head;			// ÉeÉNÉXÉ`ÉÉÇ÷ÇÃÉ|ÉCÉìÉ^
LPD3DXMESH			enemy_pD3DXMesh_head;			// ÉÅÉbÉVÉÖèÓïÒÇ÷ÇÃÉ|ÉCÉìÉ^
LPD3DXBUFFER		enemy_pD3DXBuffMat_head;		// É}ÉeÉäÉAÉãèÓïÒÇ÷ÇÃÉ|ÉCÉìÉ^
DWORD				enemy_nNumMat_head;				// É}ÉeÉäÉAÉãèÓïÒÇÃêî

LPDIRECT3DTEXTURE9	enemy_pD3DTexture_armL;			// ÉeÉNÉXÉ`ÉÉÇ÷ÇÃÉ|ÉCÉìÉ^
LPD3DXMESH			enemy_pD3DXMesh_armL;			// ÉÅÉbÉVÉÖèÓïÒÇ÷ÇÃÉ|ÉCÉìÉ^
LPD3DXBUFFER		enemy_pD3DXBuffMat_armL;		// É}ÉeÉäÉAÉãèÓïÒÇ÷ÇÃÉ|ÉCÉìÉ^
DWORD				enemy_nNumMat_armL;				// É}ÉeÉäÉAÉãèÓïÒÇÃêî

LPDIRECT3DTEXTURE9	enemy_pD3DTexture_armR;			// ÉeÉNÉXÉ`ÉÉÇ÷ÇÃÉ|ÉCÉìÉ^
LPD3DXMESH			enemy_pD3DXMesh_armR;			// ÉÅÉbÉVÉÖèÓïÒÇ÷ÇÃÉ|ÉCÉìÉ^
LPD3DXBUFFER		enemy_pD3DXBuffMat_armR;		// É}ÉeÉäÉAÉãèÓïÒÇ÷ÇÃÉ|ÉCÉìÉ^
DWORD				enemy_nNumMat_armR;				// É}ÉeÉäÉAÉãèÓïÒÇÃêî

LPDIRECT3DTEXTURE9	enemy_pD3DTexture_legL;			// ÉeÉNÉXÉ`ÉÉÇ÷ÇÃÉ|ÉCÉìÉ^
LPD3DXMESH			enemy_pD3DXMesh_legL;			// ÉÅÉbÉVÉÖèÓïÒÇ÷ÇÃÉ|ÉCÉìÉ^
LPD3DXBUFFER		enemy_pD3DXBuffMat_legL;		// É}ÉeÉäÉAÉãèÓïÒÇ÷ÇÃÉ|ÉCÉìÉ^
DWORD				enemy_nNumMat_legL;				// É}ÉeÉäÉAÉãèÓïÒÇÃêî

LPDIRECT3DTEXTURE9	enemy_pD3DTexture_legR;			// ÉeÉNÉXÉ`ÉÉÇ÷ÇÃÉ|ÉCÉìÉ^
LPD3DXMESH			enemy_pD3DXMesh_legR;			// ÉÅÉbÉVÉÖèÓïÒÇ÷ÇÃÉ|ÉCÉìÉ^
LPD3DXBUFFER		enemy_pD3DXBuffMat_legR;		// É}ÉeÉäÉAÉãèÓïÒÇ÷ÇÃÉ|ÉCÉìÉ^
DWORD				enemy_nNumMat_legR;				// É}ÉeÉäÉAÉãèÓïÒÇÃêî

ENEMYTBL move_tbl1[] = {
	{D3DXVECTOR3(0.0f,0.0f,0.0f),D3DXVECTOR3(0.0f,0.0f,0.0f),D3DXVECTOR3(1.0f,1.0f,1.0f),0.01f},
	{D3DXVECTOR3(100.0f,0.0f,0.0f),D3DXVECTOR3(0.0f,-2.0f,0.0f),D3DXVECTOR3(1.0f,1.0f,1.0f),0.02f},
	{D3DXVECTOR3(-100.0f,0.0f,-100.0f),D3DXVECTOR3(0.0f,3.0f,0.0f),D3DXVECTOR3(1.0f,1.0f,1.0f),0.05f},
	{D3DXVECTOR3(0.0f,0.0f,0.0f),D3DXVECTOR3(0.0f,0.0f,0.0f),D3DXVECTOR3(1.0f,1.0f,1.0f),0.0f},
};

ENEMYTBL move_tbl2[] = {
	{D3DXVECTOR3(0.0f,0.0f,0.0f),D3DXVECTOR3(0.0f,0.0f,0.0f),D3DXVECTOR3(1.0f,1.0f,1.0f),0.01f},
	{D3DXVECTOR3(50.0f,0.0f,0.0f),D3DXVECTOR3(0.0f,-2.0f,0.0f),D3DXVECTOR3(1.0f,1.0f,1.0f),0.02f},
	{D3DXVECTOR3(100.0f,0.0f,-300.0f),D3DXVECTOR3(0.0f,8.0f,0.0f),D3DXVECTOR3(1.0f,1.0f,1.0f),0.04f},
	{D3DXVECTOR3(200.0f,0.0f,-100.0f),D3DXVECTOR3(0.0f,.0f,0.0f),D3DXVECTOR3(1.0f,1.0f,1.0f),0.06f},
	{D3DXVECTOR3(0.0f,0.0f,0.0f),D3DXVECTOR3(0.0f,0.0f,0.0f),D3DXVECTOR3(1.0f,1.0f,1.0f),0.0f},
};

ENEMYTBL move_tbl3[] = {
	{D3DXVECTOR3(0.0f,0.0f,0.0f),D3DXVECTOR3(0.0f,0.0f,0.0f),D3DXVECTOR3(1.0f,1.0f,1.0f),0.01f},
	{D3DXVECTOR3(50.0f,0.0f,0.0f),D3DXVECTOR3(0.0f,-3.0f,0.0f),D3DXVECTOR3(1.0f,1.0f,1.0f),0.02f},
	{D3DXVECTOR3(100.0f,0.0f,-300.0f),D3DXVECTOR3(0.0f,5.0f,0.0f),D3DXVECTOR3(1.0f,1.0f,1.0f),0.04f},
	{D3DXVECTOR3(150.0f,0.0f,400.0f),D3DXVECTOR3(0.0f,5.0f,0.0f),D3DXVECTOR3(1.0f,1.0f,1.0f),0.06f},
	{D3DXVECTOR3(0.0f,0.0f,0.0f),D3DXVECTOR3(0.0f,0.0f,0.0f),D3DXVECTOR3(1.0f,1.0f,1.0f),0.0f},
};

ENEMYTBL move_tbl4[] = {
	{D3DXVECTOR3(0.0f,0.0f,0.0f),D3DXVECTOR3(0.0f,0.0f,0.0f),D3DXVECTOR3(1.0f,1.0f,1.0f),0.01f},
	{D3DXVECTOR3(300.0f,0.0f,0.0f),D3DXVECTOR3(0.0f,-3.0f,0.0f),D3DXVECTOR3(1.0f,1.0f,1.0f),0.02f},
	{D3DXVECTOR3(500.0f,0.0f,0.0f),D3DXVECTOR3(0.0f,5.0f,0.0f),D3DXVECTOR3(1.0f,1.0f,1.0f),0.04f},
	{D3DXVECTOR3(300.0f,0.0f,0.0f),D3DXVECTOR3(0.0f,5.0f,0.0f),D3DXVECTOR3(1.0f,1.0f,1.0f),0.06f},
	{D3DXVECTOR3(0.0f,0.0f,0.0f),D3DXVECTOR3(0.0f,0.0f,0.0f),D3DXVECTOR3(1.0f,1.0f,1.0f),0.0f},
};

ENEMYTBL move_tbl5[] = {
	{D3DXVECTOR3(0.0f,0.0f,0.0f),D3DXVECTOR3(0.0f,0.0f,0.0f),D3DXVECTOR3(1.0f,1.0f,1.0f),0.01f},
	{D3DXVECTOR3(0.0f,0.0f,300.0f),D3DXVECTOR3(0.0f,-3.0f,0.0f),D3DXVECTOR3(1.0f,1.0f,1.0f),0.02f},
	{D3DXVECTOR3(0.0f,0.0f,500.0f),D3DXVECTOR3(0.0f,5.0f,0.0f),D3DXVECTOR3(1.0f,1.0f,1.0f),0.04f},
	{D3DXVECTOR3(0.0f,0.0f,300.0f),D3DXVECTOR3(0.0f,5.0f,0.0f),D3DXVECTOR3(1.0f,1.0f,1.0f),0.06f},
	{D3DXVECTOR3(0.0f,0.0f,0.0f),D3DXVECTOR3(0.0f,0.0f,0.0f),D3DXVECTOR3(1.0f,1.0f,1.0f),0.0f},
};

// äKëwÉAÉjÉÅÅ[ÉVÉáÉì
ENEMY_SET set_tbl_ENEMY[] = {    //pos,rot,scl äeÉpÅ[ÉcÇÃèâä˙íl
	{	D3DXVECTOR3(0.0f, 0.0f, 0.0f),	D3DXVECTOR3(0.0f, (rand() % 300 + 1.0f), 0.0f),	D3DXVECTOR3(0.5f, 0.5f, 0.5f)},//ëÃ			
	{	D3DXVECTOR3(0.0f, 50.0f, 0.0f),	D3DXVECTOR3(0.0f, 0.0f, 0.0f),	D3DXVECTOR3(0.9f, 0.9f, 0.9f)},//ì™ïî		
	{	D3DXVECTOR3(-12.0f, 40.0f, -0.1f),	D3DXVECTOR3(0.0f, 0.0f, 0.0f),	D3DXVECTOR3(0.9f, 0.9f, 0.9f)},//âEòr
	{	D3DXVECTOR3(12.0f, 40.0f, -0.1f),	D3DXVECTOR3(0.0f, 0.0f, 0.0f),	D3DXVECTOR3(0.9f, 0.9f, 0.9f)},//ç∂òr
	{	D3DXVECTOR3(-5.0f,20.0f, 0.0f),	D3DXVECTOR3(0.0f, 0.0f, 0.0f),	D3DXVECTOR3(1.0f, 1.0f, 1.0f)},//âEëæÇ‡Ç‡
	{	D3DXVECTOR3(5.0f, 20.0f, 0.0f),	D3DXVECTOR3(0.0f, 0.0f, 0.0f),	D3DXVECTOR3(1.0f, 1.0f, 1.0f)},//ç∂ëæÇ‡Ç‡
};

//ï‡Ç´ÉÇÅ[ÉVÉáÉì
D3DXVECTOR3 Ebody_walk_tbl[] = { //ëÃ

	D3DXVECTOR3(0.00000f, 0.000000f, 0.000000f),
	D3DXVECTOR3(0.00000f, -1.000000f, 0.000000f),
	D3DXVECTOR3(0.0f, 1.0f, 0.000000f),
};

D3DXVECTOR3 Ehead_walk_tbl[] = { //ì™ïî

	D3DXVECTOR3(0.000000f, 0.0f, 0.000000f),
	D3DXVECTOR3(0.000000f, D3DX_PI * 2, 0.000000f),
	D3DXVECTOR3(0.000000f, D3DX_PI * 2, 0.000000f),

};

D3DXVECTOR3 EarmR_walk_tbl[] = { //âEòr

	D3DXVECTOR3(0.374533f, 0.000000f, 0.000000f),
	D3DXVECTOR3(-0.574533f, 0.000000f, 0.000000f),
	D3DXVECTOR3(0.374533f, 0.000000f, 0.000000f),
};

D3DXVECTOR3 EarmL_walk_tbl[] = { //ç∂òr

	D3DXVECTOR3(-0.374533f, 0.000000f, 0.000000f),
	D3DXVECTOR3(0.574533f, 0.000000f, 0.000000f),
	D3DXVECTOR3(-0.374533f, 0.000000f, 0.000000f),
};

D3DXVECTOR3 ElegR_walk_tbl[] = { //âEëæÇ‡Ç‡

	D3DXVECTOR3(-1.023599f, 0.000000f, 0.000000f),
	D3DXVECTOR3(1.023599f, 0.000000f, 0.000000f),
	D3DXVECTOR3(-1.023599f, 0.000000f, 0.000000f),
};

D3DXVECTOR3 ElegL_walk_tbl[] = { //ç∂ëæÇ‡Ç‡

	D3DXVECTOR3(1.023599f, 0.000000f, 0.000000f),
	D3DXVECTOR3(-1.023599f, 0.000000f, 0.000000f),
	D3DXVECTOR3(1.023599f, 0.000000f, 0.000000f),
};

//çUåÇÉÇÅ[ÉVÉáÉì
D3DXVECTOR3 Ebody_Attack_tbl[] = { //ëÃ

	D3DXVECTOR3(0.00000f, 0.000000f, 0.000000f),
	D3DXVECTOR3(-D3DX_PI / 2, 0.0f, 0.000000f),
	D3DXVECTOR3(-D3DX_PI / 2, 0.0f, 0.000000f),
	D3DXVECTOR3(-D3DX_PI / 2, 0.0f, 0.000000f),
	D3DXVECTOR3(-D3DX_PI / 2, 0.0f, 0.000000f),
	D3DXVECTOR3(-D3DX_PI / 2, 0.0f, 0.000000f),
	D3DXVECTOR3(-1.50000f, 0.000000f, 0.000000f),
	D3DXVECTOR3(-1.40000f, 0.000000f, 0.000000f),
	D3DXVECTOR3(-1.30000f, 0.000000f, 0.000000f),
	D3DXVECTOR3(-1.00000f, 0.000000f, 0.000000f),
	D3DXVECTOR3(0.00000f, -1.000000f, 0.000000f),
	D3DXVECTOR3(0.00000f, 0.000000f, 0.000000f),
};

D3DXVECTOR3 Ehead_Attack_tbl[] = { //ì™ïî

	D3DXVECTOR3(0.00000f, 0.0f, 0.000000f),
	D3DXVECTOR3(0.0f, D3DX_PI * 2, 0.000000f),
	D3DXVECTOR3(0.0f, 0.0f, 0.000000f),
	D3DXVECTOR3(0.0f, D3DX_PI * 2, 0.000000f),
	D3DXVECTOR3(0.0f, 0.0f, 0.000000f),
	D3DXVECTOR3(0.0f, D3DX_PI * 2, 0.000000f),
	D3DXVECTOR3(0.0f, 0.0f, 0.000000f),
	D3DXVECTOR3(0.0f, D3DX_PI * 2, 0.000000f),
	D3DXVECTOR3(0.0f, 0.0f, 0.000000f),
	D3DXVECTOR3(0.0f, D3DX_PI * 2, 0.000000f),
	D3DXVECTOR3(0.00000f, 0.0f, 0.000000f),
	D3DXVECTOR3(0.00000f, D3DX_PI * 2, 0.000000f),
};

D3DXVECTOR3 EarmR_Attack_tbl[] = { //âEòr

	D3DXVECTOR3(0.00000f, 0.000000f, 0.000000f),
	D3DXVECTOR3(0.1f, 0.0f, 0.000000f),
	D3DXVECTOR3(0.1f, 0.0f, 0.000000f),
	D3DXVECTOR3(0.1f, 0.0f, 0.000000f),
	D3DXVECTOR3(0.1f, 0.0f, 0.000000f),
	D3DXVECTOR3(0.1f, 0.0f, 0.000000f),
	D3DXVECTOR3(0.1f, 0.000000f, 0.000000f),
	D3DXVECTOR3(0.1f, 0.000000f, 0.000000f),
	D3DXVECTOR3(0.1f, 0.000000f, 0.000000f),
	D3DXVECTOR3(0.1f, 0.000000f, 0.000000f),
	D3DXVECTOR3(0.00000f, 0.000000f, 0.000000f),
	D3DXVECTOR3(0.00000f, 0.000000f, 0.000000f),
};

D3DXVECTOR3 EarmL_Attack_tbl[] = { //ç∂òr

	D3DXVECTOR3(0.00000f, 0.000000f, 0.000000f),
	D3DXVECTOR3(0.1f, 0.0f, 0.000000f),
	D3DXVECTOR3(0.1f, 0.0f, 0.000000f),
	D3DXVECTOR3(0.1f, 0.0f, 0.000000f),
	D3DXVECTOR3(0.1f, 0.0f, 0.000000f),
	D3DXVECTOR3(0.1f, 0.0f, 0.000000f),
	D3DXVECTOR3(0.1f, 0.000000f, 0.000000f),
	D3DXVECTOR3(0.1f, 0.000000f, 0.000000f),
	D3DXVECTOR3(0.1f, 0.000000f, 0.000000f),
	D3DXVECTOR3(0.1f, 0.000000f, 0.000000f),
	D3DXVECTOR3(0.00000f, 0.000000f, 0.000000f),
	D3DXVECTOR3(0.00000f, 0.000000f, 0.000000f),
};

D3DXVECTOR3 ElegR_Attack_tbl[] = { //âEëæÇ‡Ç‡

	D3DXVECTOR3(0.00000f, 0.000000f, 0.000000f),
	D3DXVECTOR3(0.1f, 0.0f, 0.000000f),
	D3DXVECTOR3(0.1f, 0.0f, 0.000000f),
	D3DXVECTOR3(0.1f, 0.0f, 0.000000f),
	D3DXVECTOR3(0.1f, 0.0f, 0.000000f),
	D3DXVECTOR3(0.1f, 0.0f, 0.000000f),
	D3DXVECTOR3(0.1f, 0.000000f, 0.000000f),
	D3DXVECTOR3(0.1f, 0.000000f, 0.000000f),
	D3DXVECTOR3(0.1f, 0.000000f, 0.000000f),
	D3DXVECTOR3(0.1f, 0.000000f, 0.000000f),
	D3DXVECTOR3(0.00000f, 0.000000f, 0.000000f),
	D3DXVECTOR3(0.00000f, 0.000000f, 0.000000f),
};

D3DXVECTOR3 ElegL_Attack_tbl[] = { //ç∂ëæÇ‡Ç‡

	D3DXVECTOR3(0.00000f, 0.000000f, 0.000000f),
	D3DXVECTOR3(0.1f, 0.0f, 0.000000f),
	D3DXVECTOR3(0.1f, 0.0f, 0.000000f),
	D3DXVECTOR3(0.1f, 0.0f, 0.000000f),
	D3DXVECTOR3(0.1f, 0.0f, 0.000000f),
	D3DXVECTOR3(0.1f, 0.0f, 0.000000f),
	D3DXVECTOR3(0.1f, 0.000000f, 0.000000f),
	D3DXVECTOR3(0.1f, 0.000000f, 0.000000f),
	D3DXVECTOR3(0.1f, 0.000000f, 0.000000f),
	D3DXVECTOR3(0.1f, 0.000000f, 0.000000f),
	D3DXVECTOR3(0.00000f, 0.000000f, 0.000000f),
	D3DXVECTOR3(0.00000f, 0.000000f, 0.000000f),
};

//ì|ÇÍÇÈÇ∆Ç´ÇÃÉÇÅ[ÉVÉáÉì
D3DXVECTOR3 Ebody_Hit_tbl[] = { //ëÃ
	D3DXVECTOR3(0.00000f, 0.000000f, 0.000000f),
	D3DXVECTOR3(0.00000f, 0.0f,  D3DX_PI * 2),
};

D3DXVECTOR3 Ehead_Hit_tbl[] = { //ì™ïî

	D3DXVECTOR3(0.00000f, 0.0f, 0.000000f),
	D3DXVECTOR3(0.0f, D3DX_PI * 2, 0.000000f),
	D3DXVECTOR3(0.0f, 0.0f, 0.000000f),
	D3DXVECTOR3(0.0f, D3DX_PI * 2, 0.000000f),
	D3DXVECTOR3(0.0f, 0.0f, 0.000000f),
	D3DXVECTOR3(0.0f, D3DX_PI * 2, 0.000000f),
	D3DXVECTOR3(0.0f, 0.0f, 0.000000f),
	D3DXVECTOR3(0.0f, D3DX_PI * 2, 0.000000f),
	D3DXVECTOR3(0.0f, 0.0f, 0.000000f),
	D3DXVECTOR3(0.0f, D3DX_PI * 2, 0.000000f),
	D3DXVECTOR3(0.00000f, 0.0f, 0.000000f),
	D3DXVECTOR3(0.00000f, D3DX_PI * 2, 0.000000f),
};

D3DXVECTOR3 EarmR_Hit_tbl[] = { //âEòr

	D3DXVECTOR3(0.00000f, 0.000000f, -2.000000f),
	D3DXVECTOR3(0.0f, 0.0f, -1.500000f),
};

D3DXVECTOR3 EarmL_Hit_tbl[] = { //ç∂òr

	D3DXVECTOR3(0.00000f, 0.000000f, 2.000000f),
	D3DXVECTOR3(0.0f, 0.0f, 1.500000f),
};

D3DXVECTOR3 ElegR_Hit_tbl[] = { //âEëæÇ‡Ç‡

	D3DXVECTOR3(1.0f, 0.000000f, -2.000000f),
	D3DXVECTOR3(0.5f, 0.0f, -1.500000f),
};

D3DXVECTOR3 ElegL_Hit_tbl[] = { //ç∂ëæÇ‡Ç‡

	D3DXVECTOR3(1.0f, 0.000000f, 2.000000f),
	D3DXVECTOR3(0.5f, 0.0f, -1.500000f),
};

D3DXVECTOR3 formation[] =	{   //êwå`ÉtÉHÅ[ÉÅÅ[ÉVÉáÉì
	D3DXVECTOR3(0.0f, 0.0f, 0.0f),
	D3DXVECTOR3(15.0f, 0.0f, 15.0f),
	D3DXVECTOR3(-15.0f, 0.0f, 15.0f),
	D3DXVECTOR3(20.0f, 0.0f, 20.0f),
	D3DXVECTOR3(-20.0f, 0.0f, 20.0f),
};

D3DXVECTOR3 formation1[] = {   //êwå`ÉtÉHÅ[ÉÅÅ[ÉVÉáÉì
	D3DXVECTOR3(0.0f, 30.0f, 200.0f),
	D3DXVECTOR3(50.0f, 0.0f, 15.0f),
	D3DXVECTOR3(-300.0f, 20.0f, 15.0f),
	D3DXVECTOR3(20.0f, 0.0f, 300.0f),
	D3DXVECTOR3(-200.0f, 50.0f, 50.0f),
};

//=============================================================================
// èâä˙âªèàóù
//=============================================================================
HRESULT InitEnemy(int type)
{
	LPDIRECT3DDEVICE9 pDevice = GetDevice();

	if (type == 0)
	{
		enemy_pD3DTexture_body = NULL;
		enemy_pD3DXMesh_body = NULL;
		enemy_pD3DXBuffMat_body = NULL;
		enemy_nNumMat_body = 0;

		enemy_pD3DTexture_head = NULL;
		enemy_pD3DXMesh_head = NULL;
		enemy_pD3DXBuffMat_head = NULL;
		enemy_nNumMat_head = 0;

		enemy_pD3DTexture_armL = NULL;
		enemy_pD3DXMesh_armL = NULL;
		enemy_pD3DXBuffMat_armL = NULL;
		enemy_nNumMat_armL = 0;

		enemy_pD3DTexture_armR = NULL;
		enemy_pD3DXMesh_armR = NULL;
		enemy_pD3DXBuffMat_armR = NULL;
		enemy_nNumMat_armR = 0;

		enemy_pD3DTexture_legL = NULL;
		enemy_pD3DXMesh_legL = NULL;
		enemy_pD3DXBuffMat_legL = NULL;
		enemy_nNumMat_legL = 0;

		enemy_pD3DTexture_legR = NULL;
		enemy_pD3DXMesh_legR = NULL;
		enemy_pD3DXBuffMat_legR = NULL;
		enemy_nNumMat_legR = 0;

		// XÉtÉ@ÉCÉãÇÃì«Ç›çûÇ›
		if (FAILED(D3DXLoadMeshFromX(MODEL_ENEMY,		// ì«Ç›çûÇﬁÉÇÉfÉãÉtÉ@ÉCÉãñº(xÉtÉ@ÉCÉã)
			D3DXMESH_SYSTEMMEM,							// ÉÅÉbÉVÉÖÇÃçÏê¨ÉIÉvÉVÉáÉìÇéwíË
			pDevice,									// IDirect3DDevice9ÉCÉìÉ^Å[ÉtÉFÉCÉXÇ÷ÇÃÉ|ÉCÉìÉ^Å[
			NULL,										// ó◊ê⁄ê´ÉfÅ[É^Çä‹ÇﬁÉoÉbÉtÉ@Ç÷ÇÃÉ|ÉCÉìÉ^
			&enemy_pD3DXBuffMat_body,					// É}ÉeÉäÉAÉãÉfÅ[É^Çä‹ÇﬁÉoÉbÉtÉ@Ç÷ÇÃÉ|ÉCÉìÉ^
			NULL,										// ÉGÉtÉFÉNÉgÉCÉìÉXÉ^ÉìÉXÇÃîzóÒÇä‹ÇﬁÉoÉbÉtÉ@Ç÷ÇÃÉ|ÉCÉìÉ^
			&enemy_nNumMat_body,						// D3DXMATERIALç\ë¢ëÃÇÃêî
			&enemy_pD3DXMesh_body)))					// ID3DXMeshÉCÉìÉ^Å[ÉtÉFÉCÉXÇ÷ÇÃÉ|ÉCÉìÉ^ÇÃÉAÉhÉåÉX
		{
			return E_FAIL;
		}

		// XÉtÉ@ÉCÉãÇÃì«Ç›çûÇ›
		if (FAILED(D3DXLoadMeshFromX(MODEL_ENEMY_HEAD,	// ì«Ç›çûÇﬁÉÇÉfÉãÉtÉ@ÉCÉãñº(xÉtÉ@ÉCÉã)
			D3DXMESH_SYSTEMMEM,							// ÉÅÉbÉVÉÖÇÃçÏê¨ÉIÉvÉVÉáÉìÇéwíË
			pDevice,									// IDirect3DDevice9ÉCÉìÉ^Å[ÉtÉFÉCÉXÇ÷ÇÃÉ|ÉCÉìÉ^Å[
			NULL,										// ó◊ê⁄ê´ÉfÅ[É^Çä‹ÇﬁÉoÉbÉtÉ@Ç÷ÇÃÉ|ÉCÉìÉ^
			&enemy_pD3DXBuffMat_head,					// É}ÉeÉäÉAÉãÉfÅ[É^Çä‹ÇﬁÉoÉbÉtÉ@Ç÷ÇÃÉ|ÉCÉìÉ^
			NULL,										// ÉGÉtÉFÉNÉgÉCÉìÉXÉ^ÉìÉXÇÃîzóÒÇä‹ÇﬁÉoÉbÉtÉ@Ç÷ÇÃÉ|ÉCÉìÉ^
			&enemy_nNumMat_head,						// D3DXMATERIALç\ë¢ëÃÇÃêî
			&enemy_pD3DXMesh_head)))					// ID3DXMeshÉCÉìÉ^Å[ÉtÉFÉCÉXÇ÷ÇÃÉ|ÉCÉìÉ^ÇÃÉAÉhÉåÉX
		{
			return E_FAIL;
		}

		// XÉtÉ@ÉCÉãÇÃì«Ç›çûÇ›
		if (FAILED(D3DXLoadMeshFromX(MODEL_ENEMY_ARM_L,	// ì«Ç›çûÇﬁÉÇÉfÉãÉtÉ@ÉCÉãñº(xÉtÉ@ÉCÉã)
			D3DXMESH_SYSTEMMEM,							// ÉÅÉbÉVÉÖÇÃçÏê¨ÉIÉvÉVÉáÉìÇéwíË
			pDevice,									// IDirect3DDevice9ÉCÉìÉ^Å[ÉtÉFÉCÉXÇ÷ÇÃÉ|ÉCÉìÉ^Å[
			NULL,										// ó◊ê⁄ê´ÉfÅ[É^Çä‹ÇﬁÉoÉbÉtÉ@Ç÷ÇÃÉ|ÉCÉìÉ^
			&enemy_pD3DXBuffMat_armL,					// É}ÉeÉäÉAÉãÉfÅ[É^Çä‹ÇﬁÉoÉbÉtÉ@Ç÷ÇÃÉ|ÉCÉìÉ^
			NULL,										// ÉGÉtÉFÉNÉgÉCÉìÉXÉ^ÉìÉXÇÃîzóÒÇä‹ÇﬁÉoÉbÉtÉ@Ç÷ÇÃÉ|ÉCÉìÉ^
			&enemy_nNumMat_armL,						// D3DXMATERIALç\ë¢ëÃÇÃêî
			&enemy_pD3DXMesh_armL)))					// ID3DXMeshÉCÉìÉ^Å[ÉtÉFÉCÉXÇ÷ÇÃÉ|ÉCÉìÉ^ÇÃÉAÉhÉåÉX
		{
			return E_FAIL;
		}

		// XÉtÉ@ÉCÉãÇÃì«Ç›çûÇ›
		if (FAILED(D3DXLoadMeshFromX(MODEL_ENEMY_ARM_R,	// ì«Ç›çûÇﬁÉÇÉfÉãÉtÉ@ÉCÉãñº(xÉtÉ@ÉCÉã)
			D3DXMESH_SYSTEMMEM,							// ÉÅÉbÉVÉÖÇÃçÏê¨ÉIÉvÉVÉáÉìÇéwíË
			pDevice,									// IDirect3DDevice9ÉCÉìÉ^Å[ÉtÉFÉCÉXÇ÷ÇÃÉ|ÉCÉìÉ^Å[
			NULL,										// ó◊ê⁄ê´ÉfÅ[É^Çä‹ÇﬁÉoÉbÉtÉ@Ç÷ÇÃÉ|ÉCÉìÉ^
			&enemy_pD3DXBuffMat_armR,					// É}ÉeÉäÉAÉãÉfÅ[É^Çä‹ÇﬁÉoÉbÉtÉ@Ç÷ÇÃÉ|ÉCÉìÉ^
			NULL,										// ÉGÉtÉFÉNÉgÉCÉìÉXÉ^ÉìÉXÇÃîzóÒÇä‹ÇﬁÉoÉbÉtÉ@Ç÷ÇÃÉ|ÉCÉìÉ^
			&enemy_nNumMat_armR,						// D3DXMATERIALç\ë¢ëÃÇÃêî
			&enemy_pD3DXMesh_armR)))					// ID3DXMeshÉCÉìÉ^Å[ÉtÉFÉCÉXÇ÷ÇÃÉ|ÉCÉìÉ^ÇÃÉAÉhÉåÉX
		{
			return E_FAIL;
		}

		// XÉtÉ@ÉCÉãÇÃì«Ç›çûÇ›
		if (FAILED(D3DXLoadMeshFromX(MODEL_ENEMY_LEG_L,	// ì«Ç›çûÇﬁÉÇÉfÉãÉtÉ@ÉCÉãñº(xÉtÉ@ÉCÉã)
			D3DXMESH_SYSTEMMEM,							// ÉÅÉbÉVÉÖÇÃçÏê¨ÉIÉvÉVÉáÉìÇéwíË
			pDevice,									// IDirect3DDevice9ÉCÉìÉ^Å[ÉtÉFÉCÉXÇ÷ÇÃÉ|ÉCÉìÉ^Å[
			NULL,										// ó◊ê⁄ê´ÉfÅ[É^Çä‹ÇﬁÉoÉbÉtÉ@Ç÷ÇÃÉ|ÉCÉìÉ^
			&enemy_pD3DXBuffMat_legL,					// É}ÉeÉäÉAÉãÉfÅ[É^Çä‹ÇﬁÉoÉbÉtÉ@Ç÷ÇÃÉ|ÉCÉìÉ^
			NULL,										// ÉGÉtÉFÉNÉgÉCÉìÉXÉ^ÉìÉXÇÃîzóÒÇä‹ÇﬁÉoÉbÉtÉ@Ç÷ÇÃÉ|ÉCÉìÉ^
			&enemy_nNumMat_legL,						// D3DXMATERIALç\ë¢ëÃÇÃêî
			&enemy_pD3DXMesh_legL)))					// ID3DXMeshÉCÉìÉ^Å[ÉtÉFÉCÉXÇ÷ÇÃÉ|ÉCÉìÉ^ÇÃÉAÉhÉåÉX
		{
			return E_FAIL;
		}

		// XÉtÉ@ÉCÉãÇÃì«Ç›çûÇ›
		if (FAILED(D3DXLoadMeshFromX(MODEL_ENEMY_LEG_R,	// ì«Ç›çûÇﬁÉÇÉfÉãÉtÉ@ÉCÉãñº(xÉtÉ@ÉCÉã)
			D3DXMESH_SYSTEMMEM,							// ÉÅÉbÉVÉÖÇÃçÏê¨ÉIÉvÉVÉáÉìÇéwíË
			pDevice,									// IDirect3DDevice9ÉCÉìÉ^Å[ÉtÉFÉCÉXÇ÷ÇÃÉ|ÉCÉìÉ^Å[
			NULL,										// ó◊ê⁄ê´ÉfÅ[É^Çä‹ÇﬁÉoÉbÉtÉ@Ç÷ÇÃÉ|ÉCÉìÉ^
			&enemy_pD3DXBuffMat_legR,					// É}ÉeÉäÉAÉãÉfÅ[É^Çä‹ÇﬁÉoÉbÉtÉ@Ç÷ÇÃÉ|ÉCÉìÉ^
			NULL,										// ÉGÉtÉFÉNÉgÉCÉìÉXÉ^ÉìÉXÇÃîzóÒÇä‹ÇﬁÉoÉbÉtÉ@Ç÷ÇÃÉ|ÉCÉìÉ^
			&enemy_nNumMat_legR,						// D3DXMATERIALç\ë¢ëÃÇÃêî
			&enemy_pD3DXMesh_legR)))					// ID3DXMeshÉCÉìÉ^Å[ÉtÉFÉCÉXÇ÷ÇÃÉ|ÉCÉìÉ^ÇÃÉAÉhÉåÉX
		{
			return E_FAIL;
		}
	}

#if 0
	// ÉeÉNÉXÉ`ÉÉÇÃì«Ç›çûÇ›
	D3DXCreateTextureFromFile(pDevice,	// ÉfÉoÉCÉXÇ÷ÇÃÉ|ÉCÉìÉ^
		TEXTURE_FILENAME,				// ÉtÉ@ÉCÉãÇÃñºëO
		&enemy_pD3DTexture_body);		// ì«Ç›çûÇﬁÉÅÉÇÉäÅ[
#endif

	for (int i = 0; i < MAX_ENEMY; i++)
	{
		g_Enemy[i].use = false;			// ç≈èâÇÕñ¢égóp
		g_Enemy[i].formation = 0;		// êwå`î‘çÜ

		//ÉGÉlÉ~Å[ÇÃê¸å`ï‚ä‘ÉpÉ^Å[ÉìÇÃê›íË
		switch (i%ENEMY_MOVEPATTERN)
		{
		case 0:
			g_Enemy[i].movepattern = move_tbl1;
			g_Enemy[i].size = sizeof(move_tbl1) / sizeof(ENEMYTBL);
			break;
		case 1:
			g_Enemy[i].movepattern = move_tbl2;
			g_Enemy[i].size = sizeof(move_tbl2) / sizeof(ENEMYTBL);
			break;
		case 2:
			g_Enemy[i].movepattern = move_tbl3;
			g_Enemy[i].size = sizeof(move_tbl3) / sizeof(ENEMYTBL);
			break;
		case 3:
			g_Enemy[i].movepattern = move_tbl4;
			g_Enemy[i].size = sizeof(move_tbl4) / sizeof(ENEMYTBL);
			break;
		case 4:
			g_Enemy[i].movepattern = move_tbl5;
			g_Enemy[i].size = sizeof(move_tbl5) / sizeof(ENEMYTBL);
			break;
		}

		g_Enemy[i].walkmove_time = 0;
		g_Enemy[i].attackmove_time = 0;
		g_Enemy[i].hitmove_time = 0;

		// ëÃ
		// à íuÅEâÒì]ÅEÉXÉPÅ[ÉãÇÃèâä˙âªê›íË
		g_Enemy[i].pos = set_tbl_ENEMY[BODY].pos;
		g_Enemy[i].rot = set_tbl_ENEMY[BODY].rot;
		g_Enemy[i].scl = set_tbl_ENEMY[BODY].scl;

		// äÓèÄà íuÅEâÒì]ÅEÉXÉPÅ[ÉãÇÃèâä˙âªê›íË
		g_Enemy[i].spos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
		g_Enemy[i].srot = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
		g_Enemy[i].sscl = D3DXVECTOR3(0.5f, 0.5f, 0.5f);

		g_Enemy[i].move_time = 0.0f;
		g_Enemy[i].back_time = 0.0f;
		g_Enemy[i].spd = 1.0f;
		g_Enemy[i].following = false;
		g_Enemy[i].timestop = false;

		g_Enemy[i].oldpos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
		g_Enemy[i].hit_oldpos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
		g_Enemy[i].oldindex = 0;
		g_Enemy[i].pattern = 1;
		g_Enemy[i].parent = NULL;
		g_Enemy[i].status = WALK;

		g_Enemy[i].attack_dt = 0;
		g_Enemy[i].hit_dt = 0;

		g_Enemy[i].hit = 10.0f;
		g_Enemy[i].hit_cnt = 0;
		g_Enemy[i].hit_cnt_max = 40;
		g_Enemy[i].ofs = D3DXVECTOR3(0.0f, 0.0f, 0.0f);

		for (int j = 0; j < 5; j++)
		{
			// âeÇÃèâä˙âª
			g_Shadowpos[j] = D3DXVECTOR3(g_Enemy[i].pos.x + j * 10.0f, g_Enemy[i].pos.y, g_Enemy[i].pos.z + j * 20);
			g_Shadowpos[j].y = 0.0f;
			g_Enemy[i].shadowIdx[j] = CreateShadow(g_Shadowpos[j], g_Enemy[i].scl);
		}

		// ì™
		g_Enemyhead[i].use = false;			// ç≈èâÇÕñ¢égóp

		switch (i%ENEMY_MOVEPATTERN)
		{
		case 0:
			g_Enemyhead[i].movepattern = move_tbl1;
			g_Enemyhead[i].size = sizeof(move_tbl1) / sizeof(ENEMYTBL);
			break;
		case 1:
			g_Enemyhead[i].movepattern = move_tbl2;
			g_Enemyhead[i].size = sizeof(move_tbl2) / sizeof(ENEMYTBL);
			break;
		case 2:
			g_Enemyhead[i].movepattern = move_tbl3;
			g_Enemyhead[i].size = sizeof(move_tbl3) / sizeof(ENEMYTBL);
			break;
		case 3:
			g_Enemyhead[i].movepattern = move_tbl4;
			g_Enemyhead[i].size = sizeof(move_tbl4) / sizeof(ENEMYTBL);
			break;
		case 4:
			g_Enemyhead[i].movepattern = move_tbl5;
			g_Enemyhead[i].size = sizeof(move_tbl5) / sizeof(ENEMYTBL);
			break;
		}

		// à íuÅEâÒì]ÅEÉXÉPÅ[ÉãÇÃèâä˙âªê›íË
		g_Enemyhead[i].pos = set_tbl_ENEMY[HEAD].pos;
		g_Enemyhead[i].rot = set_tbl_ENEMY[HEAD].rot;
		g_Enemyhead[i].scl = set_tbl_ENEMY[HEAD].scl;

		// äÓèÄà íuÅEâÒì]ÅEÉXÉPÅ[ÉãÇÃèâä˙âªê›íË
		g_Enemyhead[i].spos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
		g_Enemyhead[i].srot = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
		g_Enemyhead[i].sscl = D3DXVECTOR3(0.5f, 0.5f, 0.5f);

		g_Enemyhead[i].move_time = 0.0f;
		g_Enemyhead[i].back_time = 0.0f;
		g_Enemyhead[i].spd = 1.0f;
		g_Enemyhead[i].following = false;
		g_Enemyhead[i].timestop = false;
		g_Enemyhead[i].oldpos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
		g_Enemyhead[i].hit_oldpos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
		g_Enemyhead[i].oldindex = 0;
		g_Enemyhead[i].pattern = 1;
		g_Enemyhead[i].parent = &g_Enemy[i];

		// âEòr
		g_EnemyarmR[i].use = false;			// ç≈èâÇÕñ¢égóp

		switch (i%ENEMY_MOVEPATTERN)
		{
		case 0:
			g_EnemyarmR[i].movepattern = move_tbl1;
			g_EnemyarmR[i].size = sizeof(move_tbl1) / sizeof(ENEMYTBL);
			break;
		case 1:
			g_EnemyarmR[i].movepattern = move_tbl2;
			g_EnemyarmR[i].size = sizeof(move_tbl2) / sizeof(ENEMYTBL);
			break;
		case 2:
			g_EnemyarmR[i].movepattern = move_tbl3;
			g_EnemyarmR[i].size = sizeof(move_tbl3) / sizeof(ENEMYTBL);
			break;
		case 3:
			g_EnemyarmR[i].movepattern = move_tbl4;
			g_EnemyarmR[i].size = sizeof(move_tbl4) / sizeof(ENEMYTBL);
			break;
		case 4:
			g_EnemyarmR[i].movepattern = move_tbl5;
			g_EnemyarmR[i].size = sizeof(move_tbl5) / sizeof(ENEMYTBL);
			break;
		}

		// à íuÅEâÒì]ÅEÉXÉPÅ[ÉãÇÃèâä˙âªê›íË
		g_EnemyarmR[i].pos = set_tbl_ENEMY[ARM_R].pos;
		g_EnemyarmR[i].rot = set_tbl_ENEMY[ARM_R].rot;
		g_EnemyarmR[i].scl = set_tbl_ENEMY[ARM_R].scl;

		// äÓèÄà íuÅEâÒì]ÅEÉXÉPÅ[ÉãÇÃèâä˙âªê›íË
		g_EnemyarmR[i].spos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
		g_EnemyarmR[i].srot = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
		g_EnemyarmR[i].sscl = D3DXVECTOR3(0.5f, 0.5f, 0.5f);

		g_EnemyarmR[i].move_time = 0.0f;
		g_EnemyarmR[i].back_time = 0.0f;
		g_EnemyarmR[i].spd = 1.0f;
		g_EnemyarmR[i].following = false;
		g_EnemyarmR[i].timestop = false;
		g_EnemyarmR[i].oldpos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
		g_EnemyarmR[i].hit_oldpos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
		g_EnemyarmR[i].oldindex = 0;
		g_EnemyarmR[i].pattern = 1;
		g_EnemyarmR[i].parent = &g_Enemy[i];

		// ç∂òr
		g_EnemyarmL[i].use = false;			// ç≈èâÇÕñ¢égóp

		switch (i%ENEMY_MOVEPATTERN)
		{
		case 0:
			g_EnemyarmL[i].movepattern = move_tbl1;
			g_EnemyarmL[i].size = sizeof(move_tbl1) / sizeof(ENEMYTBL);
			break;
		case 1:
			g_EnemyarmL[i].movepattern = move_tbl2;
			g_EnemyarmL[i].size = sizeof(move_tbl2) / sizeof(ENEMYTBL);
			break;
		case 2:
			g_EnemyarmL[i].movepattern = move_tbl3;
			g_EnemyarmL[i].size = sizeof(move_tbl3) / sizeof(ENEMYTBL);
			break;
		case 3:
			g_EnemyarmL[i].movepattern = move_tbl4;
			g_EnemyarmL[i].size = sizeof(move_tbl4) / sizeof(ENEMYTBL);
			break;
		case 4:
			g_EnemyarmL[i].movepattern = move_tbl5;
			g_EnemyarmL[i].size = sizeof(move_tbl5) / sizeof(ENEMYTBL);
			break;
		}

		// à íuÅEâÒì]ÅEÉXÉPÅ[ÉãÇÃèâä˙âªê›íË
		g_EnemyarmL[i].pos = set_tbl_ENEMY[ARM_L].pos;
		g_EnemyarmL[i].rot = set_tbl_ENEMY[ARM_L].rot;
		g_EnemyarmL[i].scl = set_tbl_ENEMY[ARM_L].scl;

		// äÓèÄà íuÅEâÒì]ÅEÉXÉPÅ[ÉãÇÃèâä˙âªê›íË
		g_EnemyarmL[i].spos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
		g_EnemyarmL[i].srot = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
		g_EnemyarmL[i].sscl = D3DXVECTOR3(0.5f, 0.5f, 0.5f);

		g_EnemyarmL[i].move_time = 0.0f;
		g_EnemyarmL[i].back_time = 0.0f;
		g_EnemyarmL[i].spd = 1.0f;
		g_EnemyarmL[i].following = false;
		g_EnemyarmL[i].timestop = false;
		g_EnemyarmL[i].oldpos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
		g_EnemyarmL[i].hit_oldpos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
		g_EnemyarmL[i].oldindex = 0;
		g_EnemyarmL[i].pattern = 1;
		g_EnemyarmL[i].parent = &g_Enemy[i];

		// âEë´
		g_EnemylegR[i].use = false;			// ç≈èâÇÕñ¢égóp

		switch (i%ENEMY_MOVEPATTERN)
		{
		case 0:
			g_EnemylegR[i].movepattern = move_tbl1;
			g_EnemylegR[i].size = sizeof(move_tbl1) / sizeof(ENEMYTBL);
			break;
		case 1:
			g_EnemylegR[i].movepattern = move_tbl2;
			g_EnemylegR[i].size = sizeof(move_tbl2) / sizeof(ENEMYTBL);
			break;
		case 2:
			g_EnemylegR[i].movepattern = move_tbl3;
			g_EnemylegR[i].size = sizeof(move_tbl3) / sizeof(ENEMYTBL);
			break;
		case 3:
			g_EnemylegR[i].movepattern = move_tbl4;
			g_EnemylegR[i].size = sizeof(move_tbl4) / sizeof(ENEMYTBL);
			break;
		case 4:
			g_EnemylegR[i].movepattern = move_tbl5;
			g_EnemylegR[i].size = sizeof(move_tbl5) / sizeof(ENEMYTBL);
			break;
		}

		// à íuÅEâÒì]ÅEÉXÉPÅ[ÉãÇÃèâä˙âªê›íË
		g_EnemylegR[i].pos = set_tbl_ENEMY[LEG_R].pos;
		g_EnemylegR[i].rot = set_tbl_ENEMY[LEG_R].rot;
		g_EnemylegR[i].scl = set_tbl_ENEMY[LEG_R].scl;

		// äÓèÄà íuÅEâÒì]ÅEÉXÉPÅ[ÉãÇÃèâä˙âªê›íË
		g_EnemylegR[i].spos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
		g_EnemylegR[i].srot = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
		g_EnemylegR[i].sscl = D3DXVECTOR3(0.5f, 0.5f, 0.5f);

		g_EnemylegR[i].move_time = 0.0f;
		g_EnemylegR[i].back_time = 0.0f;
		g_EnemylegR[i].spd = 1.0f;
		g_EnemylegR[i].following = false;
		g_EnemylegR[i].timestop = false;
		g_EnemylegR[i].oldpos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
		g_EnemylegR[i].hit_oldpos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
		g_EnemylegR[i].oldindex = 0;
		g_EnemylegR[i].pattern = 1;
		g_EnemylegR[i].parent = &g_Enemy[i];

		// ç∂ë´
		g_EnemylegL[i].use = false;			// ç≈èâÇÕñ¢égóp

		switch (i%ENEMY_MOVEPATTERN)
		{
		case 0:
			g_EnemylegL[i].movepattern = move_tbl1;
			g_EnemylegL[i].size = sizeof(move_tbl1) / sizeof(ENEMYTBL);
			break;
		case 1:
			g_EnemylegL[i].movepattern = move_tbl2;
			g_EnemylegL[i].size = sizeof(move_tbl2) / sizeof(ENEMYTBL);
			break;
		case 2:
			g_EnemylegL[i].movepattern = move_tbl3;
			g_EnemylegL[i].size = sizeof(move_tbl3) / sizeof(ENEMYTBL);
			break;
		case 3:
			g_EnemylegL[i].movepattern = move_tbl4;
			g_EnemylegL[i].size = sizeof(move_tbl4) / sizeof(ENEMYTBL);
			break;
		case 4:
			g_EnemylegL[i].movepattern = move_tbl5;
			g_EnemylegL[i].size = sizeof(move_tbl5) / sizeof(ENEMYTBL);
			break;
		}
		// à íuÅEâÒì]ÅEÉXÉPÅ[ÉãÇÃèâä˙âªê›íË
		g_EnemylegL[i].pos = set_tbl_ENEMY[LEG_L].pos;
		g_EnemylegL[i].rot = set_tbl_ENEMY[LEG_L].rot;
		g_EnemylegL[i].scl = set_tbl_ENEMY[LEG_L].scl;

		// äÓèÄà íuÅEâÒì]ÅEÉXÉPÅ[ÉãÇÃèâä˙âªê›íË
		g_EnemylegL[i].spos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
		g_EnemylegL[i].srot = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
		g_EnemylegL[i].sscl = D3DXVECTOR3(0.5f, 0.5f, 0.5f);

		g_EnemylegL[i].spos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
		g_EnemylegL[i].move_time = 0.0f;
		g_EnemylegL[i].back_time = 0.0f;
		g_EnemylegL[i].spd = 2.0f;
		g_EnemylegL[i].following = false;
		g_EnemylegL[i].timestop = false;
		g_EnemylegL[i].oldpos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
		g_EnemylegL[i].hit_oldpos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
		g_EnemylegL[i].oldindex = 0;
		g_EnemylegL[i].pattern = 1;
		g_EnemylegL[i].parent = &g_Enemy[i];
	}
	return S_OK;
}

//=============================================================================
// èIóπèàóù
//=============================================================================
void UninitEnemy(void)
{
	for (int i = 0; i < MAX_ENEMY; i++)
	{
		if (enemy_pD3DTexture_body != NULL)
		{// ÉeÉNÉXÉ`ÉÉÇÃäJï˙
			enemy_pD3DTexture_body->Release();
			enemy_pD3DTexture_body = NULL;
		}

		if (enemy_pD3DXMesh_body != NULL)
		{// ÉÅÉbÉVÉÖÇÃäJï˙
			enemy_pD3DXMesh_body->Release();
			enemy_pD3DXMesh_body = NULL;
		}

		if (enemy_pD3DXBuffMat_body != NULL)
		{//É}ÉeÉäÉAÉãÇÃäJï˙
			enemy_pD3DXBuffMat_body->Release();
			enemy_pD3DXBuffMat_body = NULL;
		}

		if (enemy_pD3DTexture_head != NULL)
		{// ÉeÉNÉXÉ`ÉÉÇÃäJï˙
			enemy_pD3DTexture_head->Release();
			enemy_pD3DTexture_head = NULL;
		}
		if (enemy_pD3DXMesh_head != NULL)
		{// ÉÅÉbÉVÉÖÇÃäJï˙
			enemy_pD3DXMesh_head->Release();
			enemy_pD3DXMesh_head = NULL;
		}
		if (enemy_pD3DXBuffMat_head != NULL)
		{// É}ÉeÉäÉAÉãÇÃäJï˙
			enemy_pD3DXBuffMat_head->Release();
			enemy_pD3DXBuffMat_head = NULL;
		}

		if (enemy_pD3DTexture_armR != NULL)
		{// ÉeÉNÉXÉ`ÉÉÇÃäJï˙
			enemy_pD3DTexture_armR->Release();
			enemy_pD3DTexture_armR = NULL;
		}
		if (enemy_pD3DXMesh_armR != NULL)
		{// ÉÅÉbÉVÉÖÇÃäJï˙
			enemy_pD3DXMesh_armR->Release();
			enemy_pD3DXMesh_armR = NULL;
		}
		if (enemy_pD3DXBuffMat_armR != NULL)
		{// É}ÉeÉäÉAÉãÇÃäJï˙
			enemy_pD3DXBuffMat_armR->Release();
			enemy_pD3DXBuffMat_armR = NULL;
		}

		if (enemy_pD3DTexture_armL != NULL)
		{// ÉeÉNÉXÉ`ÉÉÇÃäJï˙
			enemy_pD3DTexture_armL->Release();
			enemy_pD3DTexture_armL = NULL;
		}
		if (enemy_pD3DXMesh_armL != NULL)
		{// ÉÅÉbÉVÉÖÇÃäJï˙
			enemy_pD3DXMesh_armL->Release();
			enemy_pD3DXMesh_armL = NULL;
		}
		if (enemy_pD3DXBuffMat_armL != NULL)
		{// É}ÉeÉäÉAÉãÇÃäJï˙
			enemy_pD3DXBuffMat_armL->Release();
			enemy_pD3DXBuffMat_armL = NULL;
		}

		if (enemy_pD3DTexture_legR != NULL)
		{// ÉeÉNÉXÉ`ÉÉÇÃäJï˙
			enemy_pD3DTexture_legR->Release();
			enemy_pD3DTexture_legR = NULL;
		}
		if (enemy_pD3DXMesh_legR != NULL)
		{// ÉÅÉbÉVÉÖÇÃäJï˙
			enemy_pD3DXMesh_legR->Release();
			enemy_pD3DXMesh_legR = NULL;
		}
		if (enemy_pD3DXBuffMat_legR != NULL)
		{// É}ÉeÉäÉAÉãÇÃäJï˙
			enemy_pD3DXBuffMat_legR->Release();
			enemy_pD3DXBuffMat_legR = NULL;
		}

		if (enemy_pD3DTexture_legL != NULL)
		{// ÉeÉNÉXÉ`ÉÉÇÃäJï˙
			enemy_pD3DTexture_legL->Release();
			enemy_pD3DTexture_legL = NULL;
		}
		if (enemy_pD3DXMesh_legL != NULL)
		{// ÉÅÉbÉVÉÖÇÃäJï˙
			enemy_pD3DXMesh_legL->Release();
			enemy_pD3DXMesh_legL = NULL;
		}
		if (enemy_pD3DXBuffMat_legL != NULL)
		{// É}ÉeÉäÉAÉãÇÃäJï˙
			enemy_pD3DXBuffMat_legL->Release();
			enemy_pD3DXBuffMat_legL = NULL;
		}
	}
}

//=============================================================================
// çXêVèàóù
//=============================================================================
void UpdateEnemy(void)
{
	PLAYER *player = GetPlayer();

	int cnt = 0;

	for (int i = 0; i < MAX_ENEMY; i++)
	{
		if (g_Enemy[i].status != DEAD)	//ÉGÉlÉ~Å[Ç™éÄÇÒÇ≈Ç¢Ç»ÇØÇÍÇŒ
			if (g_Enemy[i].use == true)  //ÉGÉlÉ~Å[Ç™Ç¢ÇÈÇ»ÇÁ
			{
				if (g_Enemy[i].status != HIT)		// ÉGÉlÉ~Å[Ç™çUåÇÇéÛÇØÇƒÇ¢Ç»ÇØÇÍÇŒ
				{
					cnt++;					//ê∂Ç´ÇƒÇ¢ÇÈÉGÉlÉ~Å[ÇÉJÉEÉìÉg

					switch (g_Enemy[i].pattern) //ÉGÉlÉ~Å[ÇÃèÛë‘ëJà⁄ÇÃswitch
					{
					case 1://ê¸å`ï‚ä‘ÅiçıìGÅj
							//à⁄ìÆèàóù
					{
						int	index = (int)g_Enemy[i].move_time;			//ê¸å`ï‚ä‘ÇÃÉeÅ[ÉuÉãÇÃindex
						float	time = g_Enemy[i].move_time - index;	//ê¸å`ï‚ä‘ÇÃèàóùäÑçá(0.0Å`0.99....)

						g_Enemy[i].move_time += g_Enemy[i].movepattern[index].dt;	//ÉAÉjÉÅÅ[ÉVÉáÉìÇÃçáåvéûä‘Ç…ë´Ç∑
						if (index > (g_Enemy[i].size - 2))							// ÉSÅ[ÉãÇ÷ÉIÅ[ÉoÅ[ÇµÇƒÇ¢ÇΩÇÁÅAÉSÅ[ÉãÇ÷ñﬂÇ∑
						{
							g_Enemy[i].move_time = 0.0f;
							index = 0;
						}

						// Xç¿ïWÇãÅÇﬂÇÈ	X = StartX + (EndX - StartX) * ç°ÇÃéûä‘
						D3DXVECTOR3 vec = g_Enemy[i].movepattern[index + 1].pos - g_Enemy[i].movepattern[index].pos;
						g_Enemy[i].pos = g_Enemy[i].movepattern[index].pos + (vec * time) + g_Enemy[i].spos;

						//âÒì]ÇãÅÇﬂÇÈÅ@Å@Å@R = StsrtX + (EndX - startX) * ç°ÇÃéûä‘
						D3DXVECTOR3 rot = g_Enemy[i].movepattern[index + 1].rot - g_Enemy[i].movepattern[index].rot;
						g_Enemy[i].rot = g_Enemy[i].movepattern[index].rot + (rot * time) + g_Enemy[i].srot;

						//scaleÇãÅÇﬂÇÈ     S = StsrtX + (EndX - startX) * ç°ÇÃéûä‘
						D3DXVECTOR3 scl = g_Enemy[i].movepattern[index + 1].scl - g_Enemy[i].movepattern[index].scl;
						g_Enemy[i].scl = g_Enemy[i].movepattern[index].scl + (scl * time) + g_Enemy[i].sscl;

						if (CheckHitFP(player->pos, g_Enemy[i].pos, D3DXVECTOR3(-sinf(g_Enemy[i].rot.y), 0, -cosf(g_Enemy[i].rot.y)), 30, 300, 0) == true)				//ÉvÉåÉCÉÑÅ[Çå©Ç¬ÇØÇΩÇÁÅjéûä‘Çé~ÇﬂÇƒìGÇÃç¿ïWÇï€ë∂
						{
							g_Enemy[i].timestop = true;						//í«è]ÇOFFÇ…Ç∑ÇÈ

							g_Enemy[i].oldpos = g_Enemy[i].pos;				//oldposÇ…ÉGÉlÉ~Å[ç¿ïWÇï€ë∂

							g_Enemy[i].following = true;					//í«è]ÇONÇ…Ç∑ÇÈ

							g_Enemy[i].pattern = 2;							//í«è]ÉpÉ^Å[ÉìÇ…à⁄ÇÈ
						}
					}
					break;
					case 2://í«è]
					{
						D3DXVECTOR3 pos1 = player->pos - g_Enemy[i].pos;	//ÉvÉåÉCÉÑÅ[ÇÃç¿ïWÇ©ÇÁÉGÉlÉ~Å[ÇÃç¿ïWÇà¯Ç¢ÇΩÇ‡ÇÃÇposÇPÇ…ì¸ÇÍÇÈ				

						//çıìGîÕàÕäOÇ…çsÇ¡ÇΩÇÁí«Ç§ÇÃÇÇ‚ÇﬂÇÈ
						if (Length(pos1) > ENEMY_SCOUTING)
						{
							g_Enemy[i].pattern = 3;
							break;
						}
						//ãﬂÇ√Ç¢ÇΩÇÁñﬂÇÈ
						if ((Length(pos1) < 40) && ((Length(pos1) > 5)))
						{
							g_Enemy[i].attackcnt++;					//ÉGÉlÉ~Å[Ç™çUåÇäJénÇ∑ÇÈÇ‹Ç≈ÇÃéûä‘ÇÉJÉEÉìÉg
							if (g_Enemy[i].attackcnt > 30)
							{
								g_Enemy[i].status = ATTACK;			//ÉGÉlÉ~Å[Ç™çUåÇÉÇÅ[ÉhÇ…Ç»ÇÈ
							}
							break;
						}

						//çıìGîÕàÕì‡ÇÃéûÇÕí«Ç§
						if (Length(pos1) <= ENEMY_SCOUTING)
						{
							//í«è]èIóπÇµÇΩÇ∆Ç´å≥ÇÃç¿ïWÇ÷ñﬂÇÈÇΩÇﬂÇÃê¸å`ï‚ä‘ópÇÃback_timeÇèâä˙âª
							g_Enemy[i].back_time = 0.00f;

							//í«è]èàóùäJén//											
							float rot1 = atan2f(pos1.z, pos1.x);

							rot1 = (D3DX_PI / 2) * 3 - rot1;
							g_Enemy[i].rot.y = rot1;

							pos1.y = 0;
							float len = Length(pos1);

							len = 1 / len;
							pos1.x *= len;
							pos1.z *= len;
							g_Enemy[i].pos += pos1 * g_Enemy[i].spd;
								//í«è]èàóùèIóπ//
						}
					}
					break;
					case 3://å≥ÇÃç¿ïWÇ…ñﬂÇÈ

						float	back_dt = 0.01f;
						g_Enemy[i].following = false;									//í«è]ÇOFF

						D3DXVECTOR3 pos2 = g_Enemy[i].oldpos - g_Enemy[i].pos;			//åªposÇ©ÇÁñﬂÇÈèÍèäÇ÷ÇÃãóó£
						pos2.y = 0;

						g_Enemy[i].pos = g_Enemy[i].pos + pos2 * g_Enemy[i].back_time;	//oldposÇ÷å¸ÇØÇƒê¸å`ï‚ä‘
						g_Enemy[i].back_time += back_dt;								//back_timeçXêV

						//ÉGÉlÉ~Å[ÇoldposÇ÷å¸Ç©ÇπÇÈ
						float rot1 = atan2f(pos2.z, pos2.x);
						rot1 = (D3DX_PI / 2) * 3 - rot1;
						g_Enemy[i].rot.y = rot1;

						if (g_Enemy[i].back_time >= 1.0)								//oldposÇ÷ÇÃê¸å`ï‚ä‘Ç™Ç®ÇÌÇ¡ÇΩÇÁèÛë‘ëJà⁄
						{
							g_Enemy[i].timestop = false;
							g_Enemy[i].pattern = 1;
						}
						break;
					}

					// ÉGÉlÉ~Å[Ç™ï‡Ç≠ÉÇÅ[ÉVÉáÉì
					if (g_Enemy[i].status == WALK)
					{
						float	dt = 0.03f;
						g_Enemy[i].walkmove_time += dt;		// ÉAÉjÉÅÅ[ÉVÉáÉìÇÃçáåvéûä‘Ç…ë´Ç∑

						int index = (int)g_Enemy[i].walkmove_time;
						float	time = g_Enemy[i].walkmove_time - index;
						int		size = sizeof(Ebody_walk_tbl) / sizeof(D3DXVECTOR3); //ÉeÅ[ÉuÉãëSëÃÇÃÉoÉCÉgêîÇÉeÅ[ÉuÉãàÍÇ¬ÇÃÉoÉCÉgêîÇ≈äÑÇÈ(ÉeÅ[ÉuÉãêîÇãÅÇﬂÇÈ)

						if (index > (size - 2))	// ÉSÅ[ÉãÇÉIÅ[ÉoÅ[ÇµÇƒÇ¢ÇΩÇÁÅAÉSÅ[ÉãÇ÷ñﬂÇ∑
						{
							g_Enemy[i].walkmove_time = 0.0f;
							index = 0;
						}

						// ÉAÉjÉÅÅ[ÉVÉáÉìÇ≥ÇπÇÈïîà 	Å@X = StartX + (EndX - StartX) * ç°ÇÃéûä‘
						g_Enemy[i].vec = Ebody_walk_tbl[index + 1] - Ebody_walk_tbl[index];
						g_Enemyhead[i].vec = Ehead_walk_tbl[index + 1] - Ehead_walk_tbl[index];
						g_EnemyarmR[i].vec = EarmR_walk_tbl[index + 1] - EarmR_walk_tbl[index];
						g_EnemyarmL[i].vec = EarmL_walk_tbl[index + 1] - EarmL_walk_tbl[index];
						g_EnemylegR[i].vec = ElegR_walk_tbl[index + 1] - ElegR_walk_tbl[index];
						g_EnemylegL[i].vec = ElegL_walk_tbl[index + 1] - ElegL_walk_tbl[index];

						g_Enemy[i].rot = Ebody_walk_tbl[index] + g_Enemy[i].vec * time;
						g_Enemyhead[i].rot = Ehead_walk_tbl[index] + g_Enemyhead[i].vec * time;
						g_EnemyarmR[i].rot = EarmR_walk_tbl[index] + g_EnemyarmR[i].vec * time;
						g_EnemyarmL[i].rot = EarmL_walk_tbl[index] + g_EnemyarmL[i].vec * time;
						g_EnemylegR[i].rot = ElegR_walk_tbl[index] + g_EnemylegR[i].vec * time;
						g_EnemylegL[i].rot = ElegL_walk_tbl[index] + g_EnemylegL[i].vec * time;
					}

					// ÉGÉlÉ~Å[Ç™çUåÇÇµÇƒÇ¢ÇÈÉAÉjÉÅÅ[ÉVÉáÉì
					if (g_Enemy[i].status == ATTACK)
					{
						g_Enemy[i].attack_dt += 0.01f;
						g_Enemy[i].attackmove_time += g_Enemy[i].attack_dt;		// ÉAÉjÉÅÅ[ÉVÉáÉìÇÃçáåvéûä‘Ç…ë´Ç∑

						int a_index = (int)g_Enemy[i].attackmove_time;
						float	a_time = g_Enemy[i].attackmove_time - a_index;
						int		a_size = sizeof(Ebody_Attack_tbl) / sizeof(D3DXVECTOR3); //ÉeÅ[ÉuÉãëSëÃÇÃÉoÉCÉgêîÇÉeÅ[ÉuÉãàÍÇ¬ÇÃÉoÉCÉgêîÇ≈äÑÇÈ(ÉeÅ[ÉuÉãêîÇãÅÇﬂÇÈ)

						if (a_index > (a_size - 2))	// ÉSÅ[ÉãÇÉIÅ[ÉoÅ[ÇµÇƒÇ¢ÇΩÇÁÅAÉSÅ[ÉãÇ÷ñﬂÇ∑
						{
							g_Enemy[i].status = WALK;
							g_Enemy[i].pattern = 3;
							g_Enemy[i].attackmove_time = 0.0f;
							a_index = 0;
							g_Enemy[i].attackcnt = 0;
						}

						// ÉAÉjÉÅÅ[ÉVÉáÉìÇ≥ÇπÇÈïîà 	Å@X = StartX + (EndX - StartX) * ç°ÇÃéûä‘
						g_Enemy[i].vec = Ebody_Attack_tbl[a_index + 1] - Ebody_Attack_tbl[a_index];
						g_Enemyhead[i].vec = Ehead_Attack_tbl[a_index + 1] - Ehead_Attack_tbl[a_index];
						g_EnemyarmR[i].vec = EarmR_Attack_tbl[a_index + 1] - EarmR_Attack_tbl[a_index];
						g_EnemyarmL[i].vec = EarmL_Attack_tbl[a_index + 1] - EarmL_Attack_tbl[a_index];
						g_EnemylegR[i].vec = ElegR_Attack_tbl[a_index + 1] - ElegR_Attack_tbl[a_index];
						g_EnemylegL[i].vec = ElegL_Attack_tbl[a_index + 1] - ElegL_Attack_tbl[a_index];

						g_Enemy[i].rot = Ebody_Attack_tbl[a_index] + g_Enemy[i].vec * a_time;
						g_Enemyhead[i].rot = Ehead_Attack_tbl[a_index] + g_Enemyhead[i].vec * a_time;
						g_EnemyarmR[i].rot = EarmR_Attack_tbl[a_index] + g_EnemyarmR[i].vec * a_time;
						g_EnemyarmL[i].rot = EarmL_Attack_tbl[a_index] + g_EnemyarmL[i].vec * a_time;
						g_EnemylegR[i].rot = ElegR_Attack_tbl[a_index] + g_EnemylegR[i].vec * a_time;
						g_EnemylegL[i].rot = ElegL_Attack_tbl[a_index] + g_EnemylegL[i].vec * a_time;

					}
				}
			}
		//ÉGÉlÉ~Å[Ç™çUåÇÇéÛÇØÇΩéûÇÃÉAÉjÉÅÅ[ÉVÉáÉìÅiêÅÇ¡îÚÇ‘Åj
			else if (g_Enemy[i].status == HIT)
			{
				g_Enemy[i].formation = 10;
				g_Enemy[i].hit_dt += 0.003f;
				g_Enemy[i].hitmove_time += g_Enemy[i].hit_dt;		// ÉAÉjÉÅÅ[ÉVÉáÉìÇÃçáåvéûä‘Ç…ë´Ç∑

				int a_index = (int)g_Enemy[i].hitmove_time;
				float	a_time = g_Enemy[i].hitmove_time - a_index;
				int		a_size = sizeof(Ebody_Hit_tbl) / sizeof(D3DXVECTOR3); //ÉeÅ[ÉuÉãëSëÃÇÃÉoÉCÉgêîÇÉeÅ[ÉuÉãàÍÇ¬ÇÃÉoÉCÉgêîÇ≈äÑÇÈ(ÉeÅ[ÉuÉãêîÇãÅÇﬂÇÈ)

				if (a_index > (a_size - 2))	// ÉSÅ[ÉãÇÉIÅ[ÉoÅ[ÇµÇƒÇ¢ÇΩÇÁÅAÉSÅ[ÉãÇ÷ñﬂÇ∑
				{
					g_Enemy[i].hitmove_time = 0.0f;
					a_index = 0;
				}

				// ÉAÉjÉÅÅ[ÉVÉáÉìÇ≥ÇπÇÈïîà 	Å@X = StartX + (EndX - StartX) * ç°ÇÃéûä‘
				g_Enemy[i].vec = Ebody_Hit_tbl[a_index + 1] - Ebody_Hit_tbl[a_index];
				g_Enemyhead[i].vec = Ehead_Hit_tbl[a_index + 1] - Ehead_Hit_tbl[a_index];
				g_EnemyarmR[i].vec = EarmR_Hit_tbl[a_index + 1] - EarmR_Hit_tbl[a_index];
				g_EnemyarmL[i].vec = EarmL_Hit_tbl[a_index + 1] - EarmL_Hit_tbl[a_index];
				g_EnemylegR[i].vec = ElegR_Hit_tbl[a_index + 1] - ElegR_Hit_tbl[a_index];
				g_EnemylegL[i].vec = ElegL_Hit_tbl[a_index + 1] - ElegL_Hit_tbl[a_index];

				g_Enemy[i].rot = Ebody_Hit_tbl[a_index] + g_Enemy[i].vec * a_time;
				g_Enemyhead[i].rot = Ehead_Hit_tbl[a_index] + g_Enemyhead[i].vec * a_time;
				g_EnemyarmR[i].rot = EarmR_Hit_tbl[a_index] + g_EnemyarmR[i].vec * a_time;
				g_EnemyarmL[i].rot = EarmL_Hit_tbl[a_index] + g_EnemyarmL[i].vec * a_time;
				g_EnemylegR[i].rot = ElegR_Hit_tbl[a_index] + g_EnemylegR[i].vec * a_time;
				g_EnemylegL[i].rot = ElegL_Hit_tbl[a_index] + g_EnemylegL[i].vec * a_time;

				if (g_Enemy[i].hit_cnt < g_Enemy[i].hit_cnt_max)
				{
					float rag = D3DX_PI / g_Enemy[i].hit_cnt_max;
					float angle = rag * g_Enemy[i].hit_cnt;
					g_Enemy[i].ofs.x = -sinf(rand() % 100 + 1) * g_Enemy[i].hit;
					g_Enemy[i].ofs.y = sinf(angle) * g_Enemy[i].hit;
					g_Enemy[i].ofs.z = cosf((rand() % 100 + 1)) * g_Enemy[i].hit;
					g_Enemy[i].hit_cnt++;
					g_Enemy[i].pos.x += g_Enemy[i].ofs.x + g_Enemy[i].spd;
					g_Enemy[i].pos.y += g_Enemy[i].ofs.y + g_Enemy[i].spd;
					g_Enemy[i].pos.z += g_Enemy[i].ofs.z + g_Enemy[i].spd;
				}
				if (g_Enemy[i].hit_cnt >= g_Enemy[i].hit_cnt_max)		// êÅÇ¡îÚÇ‘ÇÃèIóπÅH
				{														// Yes
					g_Enemy[i].status = DEAD;							//éÄñS
					g_Enemy[i].ofs = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
					g_Enemy[i].pos.y = 0.0f;
				}
			}
		for (int j = 0; j < ENEMY_GROUP; j++)			//âeÇÃê›íË
		{
			// âeÇ‡ÉvÉåÉCÉÑÅ[ÇÃà íuÇ…çáÇÌÇπÇÈ
			g_Shadowpos[j] = g_Enemy[i].pos + (formation[j] * j);
			g_Shadowpos[j].y = 0.0f;
			SetPositionShadow(g_Enemy[i].shadowIdx[j], g_Shadowpos[j], g_Enemy[i].scl);
		}
	}

	if (cnt < MAX_ENEMY / 3)							//ÉGÉlÉ~Å[êîÇ™3ï™ÇÃ1ñ¢ñûÇ»ÇÁÉGÉlÉ~Å[Çî≠ê∂Ç≥ÇπÇÈ
	{
		SetEnemy(MAX_ENEMY, D3DXVECTOR3(-1500, 0, 1500), D3DXVECTOR3(1500, 0, -1500));
	}

}

//=============================================================================
// ï`âÊèàóù
//=============================================================================
void DrawEnemy(void)
{
	LPDIRECT3DDEVICE9 pDevice = GetDevice();

	for (int i = 0; i < MAX_ENEMY; i++)
	{
		//égÇÌÇÍÇƒÇ»Ç¢Ç»ÇÁÉRÉìÉeÉjÉÖÅ[Ç∑ÇÈ
		if (g_Enemy[i].status == DEAD) continue;

		for (int j = 0; j < ENEMY_GROUP; j++)			// Ç–Ç∆Ç©ÇΩÇ‹ÇËï™Çï`âÊèàóù
		{
			// ëÃà»äOÇÕêÊÇ…åvéZÇµÇƒÇµÇ‹Ç§
			//ÉèÅ[ÉãÉhÉ}ÉgÉäÉbÉNÉXÇÃèâä˙âª
			D3DXMatrixIdentity(&g_Enemyhead[i].mtxWorld);
			D3DXMatrixIdentity(&g_EnemyarmR[i].mtxWorld);
			D3DXMatrixIdentity(&g_EnemyarmL[i].mtxWorld);
			D3DXMatrixIdentity(&g_EnemylegR[i].mtxWorld);
			D3DXMatrixIdentity(&g_EnemylegL[i].mtxWorld);

			//ÉXÉPÅ[ÉãÇÃîΩâf
			D3DXMatrixScaling(&g_Enemyhead[i].mtxScl, g_Enemyhead[i].scl.x, g_Enemyhead[i].scl.y, g_Enemyhead[i].scl.z);
			D3DXMatrixMultiply(&g_Enemyhead[i].mtxWorld, &g_Enemyhead[i].mtxWorld, &g_Enemyhead[i].mtxScl);
			D3DXMatrixScaling(&g_EnemyarmR[i].mtxScl, g_EnemyarmR[i].scl.x, g_EnemyarmR[i].scl.y, g_EnemyarmR[i].scl.z);
			D3DXMatrixMultiply(&g_EnemyarmR[i].mtxWorld, &g_EnemyarmR[i].mtxWorld, &g_EnemyarmR[i].mtxScl);
			D3DXMatrixScaling(&g_EnemyarmL[i].mtxScl, g_EnemyarmL[i].scl.x, g_EnemyarmL[i].scl.y, g_EnemyarmL[i].scl.z);
			D3DXMatrixMultiply(&g_EnemyarmL[i].mtxWorld, &g_EnemyarmL[i].mtxWorld, &g_EnemyarmL[i].mtxScl);
			D3DXMatrixScaling(&g_EnemylegR[i].mtxScl, g_EnemylegR[i].scl.x, g_EnemylegR[i].scl.y, g_EnemylegR[i].scl.z);
			D3DXMatrixMultiply(&g_EnemylegR[i].mtxWorld, &g_EnemylegR[i].mtxWorld, &g_EnemylegR[i].mtxScl);
			D3DXMatrixScaling(&g_EnemylegL[i].mtxScl, g_EnemylegL[i].scl.x, g_EnemylegL[i].scl.y, g_EnemylegL[i].scl.z);
			D3DXMatrixMultiply(&g_EnemylegL[i].mtxWorld, &g_EnemylegL[i].mtxWorld, &g_EnemylegL[i].mtxScl);

			//âÒì]ÇîΩâf
			D3DXMatrixRotationYawPitchRoll(&g_Enemyhead[i].mtxRot, g_Enemyhead[i].rot.y, g_Enemyhead[i].rot.x, g_Enemyhead[i].rot.z);
			D3DXMatrixMultiply(&g_Enemyhead[i].mtxWorld, &g_Enemyhead[i].mtxWorld, &g_Enemyhead[i].mtxRot);
			D3DXMatrixRotationYawPitchRoll(&g_EnemyarmR[i].mtxRot, g_EnemyarmR[i].rot.y, g_EnemyarmR[i].rot.x, g_EnemyarmR[i].rot.z);
			D3DXMatrixMultiply(&g_EnemyarmR[i].mtxWorld, &g_EnemyarmR[i].mtxWorld, &g_EnemyarmR[i].mtxRot);
			D3DXMatrixRotationYawPitchRoll(&g_EnemyarmL[i].mtxRot, g_EnemyarmL[i].rot.y, g_EnemyarmL[i].rot.x, g_EnemyarmL[i].rot.z);
			D3DXMatrixMultiply(&g_EnemyarmL[i].mtxWorld, &g_EnemyarmL[i].mtxWorld, &g_EnemyarmL[i].mtxRot);
			D3DXMatrixRotationYawPitchRoll(&g_EnemylegR[i].mtxRot, g_EnemylegR[i].rot.y, g_EnemylegR[i].rot.x, g_EnemylegR[i].rot.z);
			D3DXMatrixMultiply(&g_EnemylegR[i].mtxWorld, &g_EnemylegR[i].mtxWorld, &g_EnemylegR[i].mtxRot);
			D3DXMatrixRotationYawPitchRoll(&g_EnemylegL[i].mtxRot, g_EnemylegL[i].rot.y, g_EnemylegL[i].rot.x, g_EnemylegL[i].rot.z);
			D3DXMatrixMultiply(&g_EnemylegL[i].mtxWorld, &g_EnemylegL[i].mtxWorld, &g_EnemylegL[i].mtxRot);

			//à⁄ìÆÇîΩâf
			D3DXMatrixTranslation(&g_Enemyhead[i].mtxTranslate, g_Enemyhead[i].pos.x, g_Enemyhead[i].pos.y, g_Enemyhead[i].pos.z);
			D3DXMatrixMultiply(&g_Enemyhead[i].mtxWorld, &g_Enemyhead[i].mtxWorld, &g_Enemyhead[i].mtxTranslate);
			D3DXMatrixTranslation(&g_EnemyarmR[i].mtxTranslate, g_EnemyarmR[i].pos.x, g_EnemyarmR[i].pos.y, g_EnemyarmR[i].pos.z);
			D3DXMatrixMultiply(&g_EnemyarmR[i].mtxWorld, &g_EnemyarmR[i].mtxWorld, &g_EnemyarmR[i].mtxTranslate);
			D3DXMatrixTranslation(&g_EnemyarmL[i].mtxTranslate, g_EnemyarmL[i].pos.x, g_EnemyarmL[i].pos.y, g_EnemyarmL[i].pos.z);
			D3DXMatrixMultiply(&g_EnemyarmL[i].mtxWorld, &g_EnemyarmL[i].mtxWorld, &g_EnemyarmL[i].mtxTranslate);
			D3DXMatrixTranslation(&g_EnemylegR[i].mtxTranslate, g_EnemylegR[i].pos.x, g_EnemylegR[i].pos.y, g_EnemylegR[i].pos.z);
			D3DXMatrixMultiply(&g_EnemylegR[i].mtxWorld, &g_EnemylegR[i].mtxWorld, &g_EnemylegR[i].mtxTranslate);
			D3DXMatrixTranslation(&g_EnemylegL[i].mtxTranslate, g_EnemylegL[i].pos.x, g_EnemylegL[i].pos.y, g_EnemylegL[i].pos.z);
			D3DXMatrixMultiply(&g_EnemylegL[i].mtxWorld, &g_EnemylegL[i].mtxWorld, &g_EnemylegL[i].mtxTranslate);

			//ëÃ
			//ÉèÅ[ÉãÉhÉ}ÉgÉäÉbÉNÉXÇÃèâä˙âª
			D3DXMatrixIdentity(&g_Enemy[i].mtxWorld);

			//ÉXÉPÅ[ÉãÇÃîΩâf
			D3DXMatrixScaling(&g_Enemy[i].mtxScl, g_Enemy[i].scl.x, g_Enemy[i].scl.y, g_Enemy[i].scl.z);
			D3DXMatrixMultiply(&g_Enemy[i].mtxWorld, &g_Enemy[i].mtxWorld, &g_Enemy[i].mtxScl);

			//âÒì]ÇîΩâf
			D3DXMatrixRotationYawPitchRoll(&g_Enemy[i].mtxRot, g_Enemy[i].rot.y, g_Enemy[i].rot.x, g_Enemy[i].rot.z);
			D3DXMatrixMultiply(&g_Enemy[i].mtxWorld, &g_Enemy[i].mtxWorld, &g_Enemy[i].mtxRot);

			//à⁄ìÆÇîΩâfÅiÉCÉìÉXÉ^ÉìÉVÉìÉOÅj
			D3DXVECTOR3 pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
			switch (g_Enemy[i].formation)
			{
			case 0:
				pos = g_Enemy[i].pos + (formation[j] * j);
				D3DXMatrixTranslation(&g_Enemy[i].mtxTranslate, pos.x, pos.y, pos.z);
				D3DXMatrixMultiply(&g_Enemy[i].mtxWorld, &g_Enemy[i].mtxWorld, &g_Enemy[i].mtxTranslate);
				break;

			case 1:
				pos = g_Enemy[i].pos + (formation[g_Enemy[i].formation] * j);
				D3DXMatrixTranslation(&g_Enemy[i].mtxTranslate, pos.x, pos.y, pos.z);
				D3DXMatrixMultiply(&g_Enemy[i].mtxWorld, &g_Enemy[i].mtxWorld, &g_Enemy[i].mtxTranslate);
				break;

			case 2:
				pos = g_Enemy[i].pos + (formation[g_Enemy[i].formation] * j);
				D3DXMatrixTranslation(&g_Enemy[i].mtxTranslate, pos.x, pos.y, pos.z);
				D3DXMatrixMultiply(&g_Enemy[i].mtxWorld, &g_Enemy[i].mtxWorld, &g_Enemy[i].mtxTranslate);
				break;

			case 3:
				pos = g_Enemy[i].pos + (formation[g_Enemy[i].formation] * j);
				D3DXMatrixTranslation(&g_Enemy[i].mtxTranslate, pos.x, pos.y, pos.z);
				D3DXMatrixMultiply(&g_Enemy[i].mtxWorld, &g_Enemy[i].mtxWorld, &g_Enemy[i].mtxTranslate);
				break;

			case 4:
				pos = g_Enemy[i].pos + (formation[g_Enemy[i].formation] * j);
				D3DXMatrixTranslation(&g_Enemy[i].mtxTranslate, pos.x, pos.y, pos.z);
				D3DXMatrixMultiply(&g_Enemy[i].mtxWorld, &g_Enemy[i].mtxWorld, &g_Enemy[i].mtxTranslate);
				break;

			case 10:
				switch (j)
				{
				case 0:
					pos = g_Enemy[i].pos + (formation1[j] * j);
					D3DXMatrixTranslation(&g_Enemy[i].mtxTranslate, pos.x, pos.y, pos.z);
					D3DXMatrixMultiply(&g_Enemy[i].mtxWorld, &g_Enemy[i].mtxWorld, &g_Enemy[i].mtxTranslate);
					break;
				case 1:
					pos = g_Enemy[i].pos + (formation1[j] * j);
					D3DXMatrixTranslation(&g_Enemy[i].mtxTranslate, pos.x, pos.y, pos.z);
					D3DXMatrixMultiply(&g_Enemy[i].mtxWorld, &g_Enemy[i].mtxWorld, &g_Enemy[i].mtxTranslate);
					break;
				case 2:
					pos = g_Enemy[i].pos + (formation1[j] * j);
					D3DXMatrixTranslation(&g_Enemy[i].mtxTranslate, pos.x, pos.y, pos.z);
					D3DXMatrixMultiply(&g_Enemy[i].mtxWorld, &g_Enemy[i].mtxWorld, &g_Enemy[i].mtxTranslate);
					break;
				case 3:
					pos = g_Enemy[i].pos + (formation1[j] * j);
					D3DXMatrixTranslation(&g_Enemy[i].mtxTranslate, pos.x, pos.y, pos.z);
					D3DXMatrixMultiply(&g_Enemy[i].mtxWorld, &g_Enemy[i].mtxWorld, &g_Enemy[i].mtxTranslate);
					break;
				case 4:
					pos = g_Enemy[i].pos + (formation1[j] * j);
					D3DXMatrixTranslation(&g_Enemy[i].mtxTranslate, pos.x, pos.y, pos.z);
					D3DXMatrixMultiply(&g_Enemy[i].mtxWorld, &g_Enemy[i].mtxWorld, &g_Enemy[i].mtxTranslate);
					break;
				case 5:
					pos = g_Enemy[i].pos + (formation1[j] * j);
					D3DXMatrixTranslation(&g_Enemy[i].mtxTranslate, pos.x, pos.y, pos.z);
					D3DXMatrixMultiply(&g_Enemy[i].mtxWorld, &g_Enemy[i].mtxWorld, &g_Enemy[i].mtxTranslate);
					break;
				}
			}

			//ÉèÅ[ÉãÉhÉ}ÉgÉäÉbÉNÉXÇÃê›íË
			pDevice->SetTransform(D3DTS_WORLD, &g_Enemy[i].mtxWorld);

			//åªç›ÇÃÉ}ÉeÉäÉAÉãÇéÊìæ
			pDevice->GetMaterial(&g_Enemy[i].matDef);

			// É}ÉeÉäÉAÉãèÓïÒÇ…ëŒÇ∑ÇÈÉ|ÉCÉìÉ^ÇéÊìæ
			g_Enemy[i].pD3DXMat = (D3DXMATERIAL*)enemy_pD3DXBuffMat_body->GetBufferPointer();

			for (int nCntMat = 0; nCntMat < (int)enemy_nNumMat_body; nCntMat++)
			{
				//É}ÉeÉäÉAÉãÇÃê›íË
				pDevice->SetMaterial(&g_Enemy[i].pD3DXMat[nCntMat].MatD3D);

				//ÉeÉNÉXÉ`ÉÉÇÃê›íË
				pDevice->SetTexture(0, enemy_pD3DTexture_body);

				//ï`âÊ
				enemy_pD3DXMesh_body->DrawSubset(nCntMat);
			}

			//É}ÉeÉäÉAÉãÇÉfÉtÉHÉãÉÅÇ…ñﬂÇ∑
			pDevice->SetMaterial(&g_Enemy[i].matDef);

			//ì™
			//éqÇÃworld = éqÇÃworld * êeÇÃworld
			D3DXMatrixMultiply(&g_Enemyhead[i].mtxWorld, &g_Enemyhead[i].mtxWorld, &g_Enemyhead[i].parent->mtxWorld);

			//ÉèÅ[ÉãÉhÉ}ÉgÉäÉbÉNÉXÇÃê›íË
			pDevice->SetTransform(D3DTS_WORLD, &g_Enemyhead[i].mtxWorld);

			//åªç›ÇÃÉ}ÉeÉäÉAÉãÇéÊìæ
			pDevice->GetMaterial(&g_Enemyhead[i].matDef);

			// É}ÉeÉäÉAÉãèÓïÒÇ…ëŒÇ∑ÇÈÉ|ÉCÉìÉ^ÇéÊìæ
			g_Enemyhead[i].pD3DXMat = (D3DXMATERIAL*)enemy_pD3DXBuffMat_head->GetBufferPointer();

			for (int nCntMat = 0; nCntMat < (int)enemy_nNumMat_head; nCntMat++)
			{
				//É}ÉeÉäÉAÉãÇÃê›íË
				pDevice->SetMaterial(&g_Enemyhead[i].pD3DXMat[nCntMat].MatD3D);

				//ÉeÉNÉXÉ`ÉÉÇÃê›íË
				pDevice->SetTexture(0, enemy_pD3DTexture_head);

				//ï`âÊ
				enemy_pD3DXMesh_head->DrawSubset(nCntMat);
			}

			// É}ÉeÉäÉAÉãÇÉfÉtÉHÉãÉgÇ…ñﬂÇ∑
			pDevice->SetMaterial(&g_Enemyhead[i].matDef);

			//âEòr
			//éqÇÃworld = éqÇÃworld * êeÇÃworld
			D3DXMatrixMultiply(&g_EnemyarmR[i].mtxWorld, &g_EnemyarmR[i].mtxWorld, &g_EnemyarmR[i].parent->mtxWorld);

			//ÉèÅ[ÉãÉhÉ}ÉgÉäÉbÉNÉXÇÃê›íË
			pDevice->SetTransform(D3DTS_WORLD, &g_EnemyarmR[i].mtxWorld);

			//åªç›ÇÃÉ}ÉeÉäÉAÉãÇéÊìæ
			pDevice->GetMaterial(&g_EnemyarmR[i].matDef);

			// É}ÉeÉäÉAÉãèÓïÒÇ…ëŒÇ∑ÇÈÉ|ÉCÉìÉ^ÇéÊìæ
			g_EnemyarmR[i].pD3DXMat = (D3DXMATERIAL*)enemy_pD3DXBuffMat_armR->GetBufferPointer();

			for (int nCntMat = 0; nCntMat < (int)enemy_nNumMat_armR; nCntMat++)
			{
				//É}ÉeÉäÉAÉãÇÃê›íË
				pDevice->SetMaterial(&g_EnemyarmR[i].pD3DXMat[nCntMat].MatD3D);

				//ÉeÉNÉXÉ`ÉÉÇÃê›íË
				pDevice->SetTexture(0, enemy_pD3DTexture_armR);

				//ï`âÊ
				enemy_pD3DXMesh_armR->DrawSubset(nCntMat);
			}

			// É}ÉeÉäÉAÉãÇÉfÉtÉHÉãÉgÇ…ñﬂÇ∑
			pDevice->SetMaterial(&g_EnemyarmR[i].matDef);

			//ç∂òr
			//éqÇÃworld = éqÇÃworld * êeÇÃworld
			D3DXMatrixMultiply(&g_EnemyarmL[i].mtxWorld, &g_EnemyarmL[i].mtxWorld, &g_EnemyarmL[i].parent->mtxWorld);

			//ÉèÅ[ÉãÉhÉ}ÉgÉäÉbÉNÉXÇÃê›íË
			pDevice->SetTransform(D3DTS_WORLD, &g_EnemyarmL[i].mtxWorld);

			//åªç›ÇÃÉ}ÉeÉäÉAÉãÇéÊìæ
			pDevice->GetMaterial(&g_EnemyarmL[i].matDef);

			// É}ÉeÉäÉAÉãèÓïÒÇ…ëŒÇ∑ÇÈÉ|ÉCÉìÉ^ÇéÊìæ
			g_EnemyarmL[i].pD3DXMat = (D3DXMATERIAL*)enemy_pD3DXBuffMat_armL->GetBufferPointer();

			for (int nCntMat = 0; nCntMat < (int)enemy_nNumMat_armL; nCntMat++)
			{
				//É}ÉeÉäÉAÉãÇÃê›íË
				pDevice->SetMaterial(&g_EnemyarmL[i].pD3DXMat[nCntMat].MatD3D);

				//ÉeÉNÉXÉ`ÉÉÇÃê›íË
				pDevice->SetTexture(0, enemy_pD3DTexture_armL);

				//ï`âÊ
				enemy_pD3DXMesh_armL->DrawSubset(nCntMat);
			}

			// É}ÉeÉäÉAÉãÇÉfÉtÉHÉãÉgÇ…ñﬂÇ∑
			pDevice->SetMaterial(&g_EnemyarmL[i].matDef);

			//âEòr
			//éqÇÃworld = éqÇÃworld * êeÇÃworld
			D3DXMatrixMultiply(&g_EnemylegR[i].mtxWorld, &g_EnemylegR[i].mtxWorld, &g_EnemylegR[i].parent->mtxWorld);

			//ÉèÅ[ÉãÉhÉ}ÉgÉäÉbÉNÉXÇÃê›íË
			pDevice->SetTransform(D3DTS_WORLD, &g_EnemylegR[i].mtxWorld);

			//åªç›ÇÃÉ}ÉeÉäÉAÉãÇéÊìæ
			pDevice->GetMaterial(&g_EnemylegR[i].matDef);

			// É}ÉeÉäÉAÉãèÓïÒÇ…ëŒÇ∑ÇÈÉ|ÉCÉìÉ^ÇéÊìæ
			g_EnemylegR[i].pD3DXMat = (D3DXMATERIAL*)enemy_pD3DXBuffMat_legR->GetBufferPointer();

			for (int nCntMat = 0; nCntMat < (int)enemy_nNumMat_legR; nCntMat++)
			{
				//É}ÉeÉäÉAÉãÇÃê›íË
				pDevice->SetMaterial(&g_EnemylegR[i].pD3DXMat[nCntMat].MatD3D);

				//ÉeÉNÉXÉ`ÉÉÇÃê›íË
				pDevice->SetTexture(0, enemy_pD3DTexture_legR);

				//ï`âÊ
				enemy_pD3DXMesh_legR->DrawSubset(nCntMat);
			}

			// É}ÉeÉäÉAÉãÇÉfÉtÉHÉãÉgÇ…ñﬂÇ∑
			pDevice->SetMaterial(&g_EnemylegR[i].matDef);

			//ç∂ë´
			//éqÇÃworld = éqÇÃworld * êeÇÃworld
			D3DXMatrixMultiply(&g_EnemylegL[i].mtxWorld, &g_EnemylegL[i].mtxWorld, &g_EnemylegL[i].parent->mtxWorld);

			//ÉèÅ[ÉãÉhÉ}ÉgÉäÉbÉNÉXÇÃê›íË
			pDevice->SetTransform(D3DTS_WORLD, &g_EnemylegL[i].mtxWorld);

			//åªç›ÇÃÉ}ÉeÉäÉAÉãÇéÊìæ
			pDevice->GetMaterial(&g_EnemylegL[i].matDef);

			// É}ÉeÉäÉAÉãèÓïÒÇ…ëŒÇ∑ÇÈÉ|ÉCÉìÉ^ÇéÊìæ
			g_EnemylegL[i].pD3DXMat = (D3DXMATERIAL*)enemy_pD3DXBuffMat_legL->GetBufferPointer();

			for (int nCntMat = 0; nCntMat < (int)enemy_nNumMat_legL; nCntMat++)
			{
				//É}ÉeÉäÉAÉãÇÃê›íË
				pDevice->SetMaterial(&g_EnemylegL[i].pD3DXMat[nCntMat].MatD3D);

				//ÉeÉNÉXÉ`ÉÉÇÃê›íË
				pDevice->SetTexture(0, enemy_pD3DTexture_legL);

				//ï`âÊ
				enemy_pD3DXMesh_legL->DrawSubset(nCntMat);
			}

			// É}ÉeÉäÉAÉãÇÉfÉtÉHÉãÉgÇ…ñﬂÇ∑
			pDevice->SetMaterial(&g_EnemylegL[i].matDef);
		}
	}
}

//=============================================================================
//ÉoÉgÉãÉGÉlÉ~Å[ÇÃéÊìæ
//=============================================================================
ENEMY *GetEnemy()
{
	return &(g_Enemy[0]);
}

//=============================================================================
// ÉoÉgÉãÉGÉlÉ~Å[Çîzíu
//=============================================================================
void SetEnemy(int enemy_spawn, D3DXVECTOR3 upperleft, D3DXVECTOR3 bottomright)
{
	ITEM *item = GetItem();

	for (int a = 0; a < enemy_spawn; a++)
	{
		for (int i = 0; i < MAX_ENEMY; i++)
		{
			if (g_Enemy[i].use == false)
			{
				g_Enemy[i].use = true;						// ÉGÉlÉ~Å[ÇégópíÜÇ…Ç∑ÇÈ
				g_Enemy[i].status = WALK;					// ÉGÉlÉ~Å[ÇÃÉXÉeÅ[É^ÉXÇèâä˙âª
				RefreshEnemy(i, upperleft, bottomright);	// ÉGÉlÉ~Å[ÇÃîzíu

				if ((item + i)->bUse == true)				// ÉAÉCÉeÉÄÇ™égópíÜÇ»ÇÁ
				{
					DeleteItem(i);							// è¡ÇµÇƒÇµÇ‹Ç§

					for (int j = 0; j < MAX_PARTICLE; j++)
					{
						GetParticle(i, j)->bUse = false;	// ÉpÅ[ÉeÉBÉNÉãèIóπ
					}
				}
				break;
			}
		}
	}
	return;
}
//=============================================================================
// ÉoÉgÉãÉGÉlÉ~Å[Ççƒîzíu
// reflesh_enemy	: çƒîzíuÇ∑ÇÈêî
// upperleft		: èoåªÇ∑ÇÈà íuÅiç∂è„Åj
// bottomright		: èoåªÇ∑ÇÈà íuÅiâEâ∫Åj
//=============================================================================
void RefreshEnemy(int refresh_enemy, D3DXVECTOR3 upperleft, D3DXVECTOR3 bottomright)
{
	g_Enemy[refresh_enemy].spos.x = (rand() % (int)((bottomright.x - upperleft.x + 1)) + upperleft.x);
	g_Enemy[refresh_enemy].spos.z = (rand() % (int)((upperleft.z - bottomright.z + 1)) + bottomright.z);
}


